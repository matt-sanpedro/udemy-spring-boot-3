# BEAN SCOPES #
Scope: refers to the lifecycle of a bean
- how long does bean live?
- how many instances are created?
- how is the bean shared?
- DEFAULT scope is singleton

Singleton: Spring Container creates only one instance of the bean
- bean instance is cached in memory
- all dependency injections for the bean will reference SAME bean

# ADDITIONAL SPRING BEAN SCOPES #
Prototype: creates new bean instance for each container request
Request: [only for web apps] scoped to HTTP web request
Session: [only for web apps] scoped to HTTP web session
Application: [only for web apps] scoped to ServletContext
Websocket: [only for web apps] scoper to a web socket

# BEAN LIFECYCLE METHODS #
Lifecycle Overview:
container started -> bean instantiated -> dependency injected 
	-> internal spring processing -> custom init method
	=> bean ready for use -> container shutdown 
	-> custom destroy method -> STOP 

Methods and hooks: 
- can add custom code during BEAN INITIALIZATION
- calling custom business logic methods
- setting up handles to resources (db, sockets, file, etc.)
- can add custom code during BEAN DESTRUCTION

Development Process:
	1. define methods for init and destroy
	2. add annotations: @PostConstruct and @PreDestroy

# PROTOTYPE SCOPE #
- Spring does not call the destroy method
- Spring does not manage the complete lifecycle of a prototype bean
- client code must clean up prototype-scoped objects and release resources

# JAVA CONFIG BEAN #
GOAL: implement a new coach but with NO special annotations

Development Process:
	1. create a @Configuration class
	2. define @Bean method and return it to configure the bean
		- the bean id defaults to the method name
	3. inject the bean into our controller
		- inject the bean using the bean id

Use case:
- make existing third-party class available to Spring framework
- no access to source code of third-party class
- use third-party class as a Spring bean
- real world example: use AWS S3 client as a Spring bean in app


